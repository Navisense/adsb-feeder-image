#!/usr/bin/env bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "${DIR}/config"

export DIST_PATH=${DIR}
export CUSTOM_PI_OS_PATH=$(<"${DIR}/custompios_path")
export PATH=$PATH:$CUSTOM_PI_OS_PATH

# variants that start with dietpi are built on top of the custom, preinstalled
# DietPi image - but they still act as if they are install on boot - it's just
# that almost all of the installation is already done in the build process and
# becomes a no-op at first boot. That increases consistency without adding
# significant overhead
VARIANT="$1"
if [[ "$VARIANT" == "dietpi"* ]] ; then
    VERSION="$DIST_VERSION"
    GIT_COMMIT_SHA=$(git rev-parse HEAD)     # this means that this image WILL FAIL if the code wasn't pushed to GitHub

    # these are done completely differently, we really don't use CustomPiOS for those, but for
    # consistency we still use their framework so we can benefit from their tooling
    source "${CUSTOM_PI_OS_PATH}/common.sh"
    if [[ $(ls "${DIST_PATH}"/image-dietpi/DietPi*.img 2> /dev/null | wc -l) != 0 ]] ; then
        BASE_IMG=$(ls -t "${DIST_PATH}"/image-dietpi/DietPi*.img | head -n 1)
    else
        BASE_ZIP_IMG=$(ls -t "${DIST_PATH}"/image-dietpi/*.xz | head -n 1)
        BASE_IMG="${BASE_ZIP_IMG%.xz}"
        7zr e -so "$BASE_ZIP_IMG" > "$BASE_IMG"
    fi
    echo "$BASE_IMG"
    MNT_DIR=$(mktemp -d)
    if [[ "$VARIANT" == "dietpi-fat-2" ]] ; then
        # what we want to do is this:
        # mount_image "$BASE_IMG" 1 "$MNT_DIR" "media" 2
        # but that unfortunately doesn't work if the fat partition is after the root partition
        # as that gets us a negative sizelimit
        # so instead do it ourselves here (copying the code is fine given licenses of the respective projects)
        image_path="$BASE_IMG"
        root_partition=1
        mount_path="$MNT_DIR"
        boot_mount_path="media"
        boot_partition=2
        fdisk_output=$(sfdisk --json "${image_path}" )
        boot_offset=$(($(jq ".partitiontable.partitions[] | select(.node == \"$image_path$boot_partition\").start" <<< ${fdisk_output}) * 512))
        root_offset=$(($(jq ".partitiontable.partitions[] | select(.node == \"$image_path$root_partition\").start" <<< ${fdisk_output}) * 512))

        echo "Mounting image $image_path on $mount_path, offset for boot partition is $boot_offset, offset for root partition is $root_offset"

        # mount root and boot partition

        detach_all_loopback "$image_path"
        echo "Mounting root parition"
        sudo losetup -f
        sudo mount -o loop,offset=$root_offset,sizelimit="$(( boot_offset - root_offset ))" "$image_path" "$mount_path/"
        if [[ "$boot_partition" != "$root_partition" ]]; then
            echo "Mounting boot partition"
            sudo losetup -f
            sudo mount -o loop,offset=$boot_offset "${image_path}" "${mount_path}"/"${boot_mount_path}"
        fi
        sudo mkdir -p "$mount_path/dev/pts"
        sudo mkdir -p "$mount_path/proc"
        sudo mount -o bind /dev "$mount_path/dev"
        sudo mount -o bind /dev/pts "$mount_path/dev/pts"
        sudo mount -o bind /proc "$mount_path/proc"
        CONFIG_DIR="media"
    elif [[ "$VARIANT" == "dietpi-root-only" ]] ; then
        # I think that's only the VM image, but let's keep it generic in the descriptor
        # here we don't need to mount a second partition at all; instead we just modify the files in /boot on the root partition
        # we do, however, need to make sure that the image is big enough - the VM disks come only with about a gig of storage which
        # is nowhere near enough - so let's make it 16G. The compression at the end makes this still fairly small.
        # On the flip side in order for the .iso to install on small Thin Clients, we need to have a smaller root partition
        # for that to work. So let's do 2G for that case
        if [[ "$BASE_IMG" == *"NativePC"* ]] ; then
            qemu-img resize -f raw "$BASE_IMG" 2G
        else
            qemu-img resize -f raw "$BASE_IMG" 16G
        fi
        echo ", +" | sfdisk -N 1 "$BASE_IMG"
        mount_image "$BASE_IMG" 1 "$MNT_DIR"
        CONFIG_DIR="boot"
    else
        # on a "standard" RPi/DietPi image with /boot as first and / as second partition
        # we can use the existing mount_image helper - we still mount the /boot partition on media
        # so the rest of the code can stay the same
        mount_image "$BASE_IMG" 2 "$MNT_DIR" "media" 1
        CONFIG_DIR="media"

        # these images have the unfortunate "NO_NAME" moniker. Let's try to fix that
        boot_dev=$(findmnt -o SOURCE "${MNT_DIR}/media" | tail -1)
        fatlabel "$boot_dev" ADSB-FEEDER
    fi

    if [[ "$CONFIG_DIR" == "media" ]]; then
        pushd "$MNT_DIR/boot"
        echo 'removing files that will be copied from the boot / FAT partition on first dietpi boot from /boot on partition'
        # the copying uses cp -uv "$TMP_MOUNT/$f" /boot/ to copy them from the FAT partition to /boot
        # see: /var/lib/dietpi/services/fs_partition_resize.sh
        # thus if the files from the image build are newer the user settings / user wifi settings won't be copied
        # remove them (on normal dietpi images /boot is empty ... not sure if the other files should be there or not)
        rm -vf 'dietpi.txt' 'dietpi-wifi.txt' 'dietpiEnv.txt' 'unattended_pivpn.conf' 'Automation_Custom_PreScript.sh' 'Automation_Custom_Script.sh'
        echo 'remaining files in /boot on partition 2:'
        ls
        popd
    fi
    # make sure that the pre-installed feeder image matches the one we are building
    mkdir -p "$MNT_DIR/opt/adsb/usr/lib/systemd/system/"
    cp -v -a "$DIR"/modules/adsb-feeder/filesystem/root/usr/lib/systemd/system/* "$MNT_DIR"/opt/adsb/usr/lib/systemd/system/
    cp -v -a -r "$DIR"/modules/adsb-feeder/filesystem/root/opt/adsb "$MNT_DIR"/opt/
    echo "$FEEDER_IMAGE_NAME" > "$MNT_DIR"/opt/adsb/porttracker_sdr_feeder_install_metadata/friendly_name.txt
    echo "image-install" > "$MNT_DIR"/opt/adsb/porttracker_sdr_feeder_install_metadata/previous_version.txt
    echo "$VERSION" > "$MNT_DIR"/opt/adsb/porttracker_sdr_feeder_install_metadata/version.txt
    touch "$MNT_DIR"/opt/adsb/adsb.im.passwd.and.keys

    # speed up apt-get operations by not rebuilding the man-db cache:
    rm -f "$MNT_DIR"/var/lib/man-db/auto-update

    # make systemd journal persistent for dietpi
    sed -i -e 's/.*Storage=.*/Storage=persistent/' "$MNT_DIR/etc/systemd/journald.conf"
    sed -i -e 's/.*RuntimeMaxUse=.*/RuntimeMaxUse=10M/' /etc/systemd/journald.conf
    sed -i -e 's/.*SystemMaxUse=.*/SystemMaxUse=128M/' /etc/systemd/journald.conf
    # this requires that ramlog never starts on first boot, disable it and let dietpi know it's disabled
    # in dietpi.txt this is expected: AUTO_SETUP_LOGGING_INDEX=0
    rm -f "$MNT_DIR/etc/systemd/system/multi-user.target.wants/dietpi-ramlog.service"
    rm -f "$MNT_DIR/etc/systemd/system/multi-user.target.wants/dietpi-ramlog_disable.service"
    rm -rf "$MNT_DIR"/var/tmp/dietpi/logs/dietpi-ramlog_store
    sed --follow-symlinks -i '/[[:blank:]]\/var\/log[[:blank:]]/d' "$MNT_DIR"/etc/fstab
    echo 'INDEX_LOGGING=0' >> "$MNT_DIR"/boot/dietpi/.installed
    echo 'aSOFTWARE_INSTALL_STATE[103]=0' >> "$MNT_DIR"/boot/dietpi/.installed

    cat >> /etc/wpa_supplicant/wpa_supplicant.conf <<EOF
# disable p2p as it can cause errors
p2p_disabled=1
EOF

    # systemctl mask hostapd.service
    ln -sf /dev/null "$MNT_DIR"/etc/systemd/system/hostapd.service
    # systemctl mask isc-dhcp-server.service
    ln -sf /dev/null "$MNT_DIR"/etc/systemd/system/isc-dhcp-server.service
    # enable setup service
    ln -sf /usr/lib/systemd/system/adsb-setup.service "$MNT_DIR"/etc/systemd/system/multi-user.target.wants/adsb-setup.service

    # reduce default networking timeout from 300 to 120 seconds for dietpi
    # (don't think this actually does anything)
    echo WAIT_ONLINE_TIMEOUT=120 >> "$MNT_DIR"/etc/default/networking
    # reduce the timeout for acquiring a dhcp lease, this makes dietpi networking less painful (default 60s)
    # but if this fails, wait 2 min until retrying (default 5 min)
    cat >> "$MNT_DIR"/etc/dhcp/dhclient.conf << EOF
timeout 30;
retry 30;
EOF

    # the system default route and route is set by dhclient
    # dhclient is started by ifup
    # ifup reads /etc/network/interfaces

    # usually only one default route is configured by dhclient even if
    # ethernet and wifi are up
    # set a metric for ethernet and wifi in /etc/network/interfaces
    # this causes dhclient to configure multiple default routes
    # connectivity stays intact in case one of the connection drops

    if ! grep -qs -e metric "$MNT_DIR"/etc/network/interfaces; then
        sed -i "$MNT_DIR"/etc/network/interfaces -e 's/iface eth0.*/\0\nmetric 100/'  -e 's/iface wlan0.*/\0\nmetric 600/'
    fi

    sed -i "s/ADSB_RANDOM_PASSWORD/$ROOT_PWD/" "${DIR}/variants/dietpi/dietpi.txt"
    echo "AUTO_SETUP_SSH_PUBKEY=$SSH_PUB_KEY" >> "${DIR}/variants/dietpi/dietpi.txt"
    cp "${DIR}/variants/dietpi/dietpi.txt" "$MNT_DIR"/"$CONFIG_DIR"
    cp "${DIR}/variants/dietpi/Automation_Custom_Script.sh" "$MNT_DIR"/"$CONFIG_DIR"
    cp "${DIR}/modules/adsb-feeder/filesystem/root/boot/ADSB-README.txt" "$MNT_DIR"/"$CONFIG_DIR"
    unmount_image "$MNT_DIR"
    if [[ "$VARIANT" == "dietpi-root-only" && "$BASE_IMG" == *"VM"* ]] ; then
        # now let's create all of the different VM images that DietPi knows about
        if [[ ! -d "${DIR}/../../DietPi" ]] ; then
            echo "DietPi not found in \${DIR}/../../"
            ls -l "${DIR}/../../"
            exit 0
        fi
        cd image-dietpi || exit 0
        G_GITOWNER=dirkhh G_GITBRANCH=adsbim ../../../DietPi/.build/images/dietpi-build -v all   -m 20 -o dirkhh -b adsbim --createvms
        pwd
        ls -l
    fi
    if [[ "$VARIANT" == "dietpi-root-only" && "$BASE_IMG" == *"NativePC"* ]] ; then
        # now let's create the installer iso image
        if [[ ! -d "${DIR}/../../DietPi" ]] ; then
            echo "DietPi not found in \${DIR}/../../"
            ls -l "${DIR}/../../"
            exit 0
        fi
        cd image-dietpi || exit 0
        export FP_ROOT_DEV=1 CLONING_TOOL="Clonezilla" OUTPUT_IMG_NAME="$(basename --suffix=.img "${BASE_IMG}")" MOUNT_IT="Off" SKIP_ARCHIVE=1 SKIP_FIRSTBOOT_RESIZE=1
        G_GITOWNER=dirkhh G_GITBRANCH=adsbim bash -x ../../../DietPi/.build/images/dietpi-imager "$BASE_IMG"
        pwd
        ls -l
    fi
    exit 0
else
    VERSION=$(cat ../version.txt)
    echo "image-install" > modules/adsb-feeder/filesystem/root//opt/adsb/porttracker_sdr_feeder_install_metadata/previous_version.txt
    echo "$VERSION" > modules/adsb-feeder/filesystem/root/opt/adsb/porttracker_sdr_feeder_install_metadata/version.txt

    "${CUSTOM_PI_OS_PATH}/build_custom_os" "$@"
fi

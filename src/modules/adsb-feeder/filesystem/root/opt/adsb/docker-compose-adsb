#!/bin/bash

# set up the right config files and then pass the arguments
# on to docker compose

if [ ! -f /opt/adsb/scripts/lib-common.bash ] ; then
    echo "Missing /opt/adsb/scripts/lib-common.bash, unable to continue."
    exit 1
else
    . /opt/adsb/scripts/lib-common.bash
    rootcheck
fi

# identify the calling process for better log messages
PARENTPID=$(ps -cp $$ -o ppid="")
if kill -0 "$PARENTPID" &> /dev/null ; then
    # shellcheck disable=SC2086 # the ps -q call fails with quotes around the variable
    PARENTPROC=$(ps -q$PARENTPID -o args=)
    if [[ $PARENTPROC = */opt/adsb/docker-compose-start* ]] ; then
        # this one is special as it's just a pretty wrapper around this script,
        # so instead look for the process that called docker-compose-start
        # shellcheck disable=SC2086 # the ps -p call fails with quotes around the variable
        PARENTPID=$(ps -cp $PARENTPID -o ppid="")
        if kill -0 "$PARENTPID" &> /dev/null ; then
            # shellcheck disable=SC2086 # the ps -q call fails with quotes around the variable
            PARENTPROC=$(ps -q$PARENTPID -o args=)
        else
            PARENTPROC="process $PARENTPID (appears already gone)"
        fi
    fi
else
    PARENTPROC="process $PARENTPID (appears already gone)"
fi

log $0 "$PARENTPROC called docker-compose-adsb $@"

lockFile="/opt/adsb/docker-starting.lock"
exec 9>>"$lockFile"

if ! flock --exclusive --nonblock 9; then
    log $0 "docker-compose-adsb will wait for lock"
    flock --exclusive 9
    log $0 "docker-compose-adsb finished waiting for lock"
fi

docker_compose="docker compose"
$docker_compose version &> /dev/null || docker_compose="docker-compose"

# when we restart the containers after an upgrade from v1.2.3 or earlier to a later version,
# the very first time we still need to check for the old name of the environment variable
# To make this less ugly, check for the partial name
if grep -q "_IS_BASE_CONFIG_FINISHED=True" /etc/adsb/.env 2> /dev/null ; then
    # We have a .env file and the base config is done.
    env_file="/etc/adsb/.env"
    # This source will set the COMPOSE_FILES array.
    source /opt/adsb/default.docker-compose
    if [ -f /etc/adsb/.env.user ] ; then
        # now inject the user env values
        log $0 "Injecting user env."
        python3 /opt/adsb/scripts/inject-env.py /etc/adsb/.env.user /opt/adsb/compose_files/*.yml
    fi
else
    log $0 "Things aren't configured yet, only starting Dozzle and the logger container."
    env_file="/opt/adsb/docker.image.versions"
    COMPOSE_FILES=( "-f" "/opt/adsb/compose_files/dozzle.yml" )
    if [[ "$1" == "pull" ]]; then
        log $0 "For argument pull we will also pull ultrafeeder."
        COMPOSE_FILES+=( "-f" "/opt/adsb/compose_files/ultrafeeder.yml" )
    fi
fi

docker_compose_command="$docker_compose --env-file ${env_file} ${COMPOSE_FILES[@]} $@"
log $0 "Running $docker_compose_command"
success="false"
# Try 3 times.
for i in {1..3}; do
    $docker_compose_command && success="true" && break
done
if [[ $success == "true" ]]; then
    if [[ "$1" = "up" ]] ; then
        rm -f /opt/adsb/state/compose_up_failed
    fi
    log $0 "Successfully ran $docker_compose_command"
else
    if [[ "$1" = "up" ]] ; then
        touch /opt/adsb/state/compose_up_failed
    fi
    log $0 "Failed 3 times with $docker_compose_command"
    log $0 "These containers are running:"
    log $0 "$(docker ps)"
    log $0 "These networks are defined:"
    log $0 "$(docker network ls)"
fi

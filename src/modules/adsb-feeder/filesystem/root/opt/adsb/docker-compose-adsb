#!/bin/bash

# set up the right config files and then pass the arguments
# on to docker compose

if [ ! -f /opt/adsb/scripts/lib-common.bash ] ; then
    echo "Missing /opt/adsb/scripts/lib-common.bash, unable to continue."
    exit 1
else
    . /opt/adsb/scripts/lib-common.bash
    rootcheck
fi

# identify the calling process for better log messages
PARENTPID=$(ps -cp $$ -o ppid="")
if kill -0 "$PARENTPID" &> /dev/null ; then
    # shellcheck disable=SC2086 # the ps -q call fails with quotes around the variable
    PARENTPROC=$(ps -q$PARENTPID -o args=)
    if [[ $PARENTPROC = */opt/adsb/docker-compose-start* ]] ; then
        # this one is special as it's just a pretty wrapper around this script,
        # so instead look for the process that called docker-compose-start
        # shellcheck disable=SC2086 # the ps -p call fails with quotes around the variable
        PARENTPID=$(ps -cp $PARENTPID -o ppid="")
        if kill -0 "$PARENTPID" &> /dev/null ; then
            # shellcheck disable=SC2086 # the ps -q call fails with quotes around the variable
            PARENTPROC=$(ps -q$PARENTPID -o args=)
        else
            PARENTPROC="process $PARENTPID (appears already gone)"
        fi
    fi
else
    PARENTPROC="process $PARENTPID (appears already gone)"
fi

log $0 "$PARENTPROC called docker-compose-adsb $@"

lockFile="/opt/adsb/docker-starting.lock"
exec 9>>"$lockFile"

if ! flock --exclusive --nonblock 9; then
    log $0 "docker-compose-adsb will wait for lock"
    flock --exclusive 9
    log $0 "docker-compose-adsb finished waiting for lock"
fi

docker_compose="docker compose"
$docker_compose version &> /dev/null || docker_compose="docker-compose"
compose_file_args="-f /opt/adsb/compose_files/dozzle.yml"
config_json=$(/opt/adsb/adsb-setup/config.py as_json 2>/dev/null)

if [ "$(echo $config_json | jq -r '.mandatory_config_is_complete')" != true ] ; then
    log $0 "Things aren't configured yet, only starting Dozzle and the logger container."
    if [[ "$1" == "pull" ]]; then
        log $0 "For argument pull we will also pull ultrafeeder."
        compose_file_args+=" -f /opt/adsb/compose_files/ultrafeeder.yml"
    fi
else
    # The base config is done, start all the compose files.
    if [ "$(echo $config_json | jq -r '.airspy')" = true ] ; then
        compose_file_args+=" -f /opt/adsb/compose_files/airspy.yml"
    fi
    if [ "$(echo $config_json | jq -r '.sdrplay')" = true ] \
        && [ "$(echo $config_json | jq -r '.sdrplay_license_accepted')" = true ] ; then
        compose_file_args+=" -f /opt/adsb/compose_files/sdrplay.yml"
    fi
    if [ "$(echo $config_json | jq -r '.uat978')" = true ] ; then
        compose_file_args+=" -f /opt/adsb/compose_files/uat978.yml"
    fi
    if [ -n "$(echo $config_json | jq -r '.serial_devices."1090" | select(. != null and . != "")')" ] \
        || [ -n "$(echo $config_json | jq -r '.serial_devices."978" | select(. != null and . != "")')" ] ; then
        # Start ultrafeeder if a serial device for 978 or 1090 MHz is configured.
        compose_file_args+=" -f /opt/adsb/compose_files/ultrafeeder.yml"
    fi
    if [ -n "$(echo $config_json | jq -r '.serial_devices.ais | select(. != null and . != "")')" ] ; then
    # Start shipfeeder if a serial device for AIS is configured.
        compose_file_args+=" -f /opt/adsb/compose_files/shipfeeder.yml"
    fi
    # For each of the yml snippets check if the aggregator is enabled.
    if [ "$(echo $config_json | jq -r '.aggregators.flightradar.is_enabled')" = true ] ; then
        compose_file_args+=" -f /opt/adsb/compose_files/fr24.yml"
    fi
    if [ "$(echo $config_json | jq -r '.aggregators.planewatch.is_enabled')" = true ] ; then
        compose_file_args+=" -f /opt/adsb/compose_files/pw.yml"
    fi
    if [ "$(echo $config_json | jq -r '.aggregators.flightaware.is_enabled')" = true ] ; then
        compose_file_args+=" -f /opt/adsb/compose_files/fa.yml"
    fi
    if [ "$(echo $config_json | jq -r '.aggregators.radarbox.is_enabled')" = true ] ; then
        compose_file_args+=" -f /opt/adsb/compose_files/rb.yml"
    fi
    if [ "$(echo $config_json | jq -r '.aggregators.planefinder.is_enabled')" = true ] ; then
        compose_file_args+=" -f /opt/adsb/compose_files/pf.yml"
    fi
    if [ "$(echo $config_json | jq -r '.aggregators.adsbhub.is_enabled')" = true ] ; then
        compose_file_args+=" -f /opt/adsb/compose_files/ah.yml"
    fi
    if [ "$(echo $config_json | jq -r '.aggregators.opensky.is_enabled')" = true ] ; then
        compose_file_args+=" -f /opt/adsb/compose_files/os.yml"
    fi
    if [ "$(echo $config_json | jq -r '.aggregators.radarvirtuel.is_enabled')" = true ] ; then
        compose_file_args+=" -f /opt/adsb/compose_files/rv.yml"
    fi
    if [ "$(echo $config_json | jq -r '.aggregators."1090uk".is_enabled')" = true ] ; then
        compose_file_args+=" -f /opt/adsb/compose_files/1090uk.yml"
    fi
    if [ "$(echo $config_json | jq -r '.aggregators.sdrmap.is_enabled')" = true ] ; then
        compose_file_args+=" -f /opt/adsb/compose_files/sdrmap.yml"
    fi
    # Now inject the user env values.
    if [ -f /etc/adsb/.env.user ] ; then
        log $0 "Injecting user env."
        python3 /opt/adsb/scripts/inject-env.py /etc/adsb/.env.user /opt/adsb/compose_files/*.yml
    fi
fi

# Write out the env file with the config's current values before we pass it to
# docker compose.
/opt/adsb/adsb-setup/config.py write_env_file
docker_compose_command="$docker_compose --env-file ${ENV_FILE} ${compose_file_args} $@"
log $0 "Running $docker_compose_command"
success="false"
# Try 3 times.
for i in {1..3}; do
    $docker_compose_command && success="true" && break
done
if [[ $success == "true" ]]; then
    if [[ "$1" = "up" ]] ; then
        rm -f ${DOCKER_COMPOSE_UP_FAILED_MARKER_FILE}
    fi
    log $0 "Successfully ran $docker_compose_command"
else
    if [[ "$1" = "up" ]] ; then
        touch ${DOCKER_COMPOSE_UP_FAILED_MARKER_FILE}
    fi
    log $0 "Failed 3 times with $docker_compose_command"
    log $0 "These containers are running:"
    log $0 "$(docker ps)"
    log $0 "These networks are defined:"
    log $0 "$(docker network ls)"
fi
